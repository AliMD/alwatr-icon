export const palettes = {
  refPrimary: {
    0: 'var(--ref-palette-primary0)',
    10: 'var(--ref-palette-primary10)',
    20: 'var(--ref-palette-primary20)',
    25: 'var(--ref-palette-primary25)',
    30: 'var(--ref-palette-primary30)',
    35: 'var(--ref-palette-primary35)',
    40: 'var(--ref-palette-primary40)',
    50: 'var(--ref-palette-primary50)',
    60: 'var(--ref-palette-primary60)',
    70: 'var(--ref-palette-primary70)',
    80: 'var(--ref-palette-primary80)',
    90: 'var(--ref-palette-primary90)',
    95: 'var(--ref-palette-primary95)',
    98: 'var(--ref-palette-primary98)',
    99: 'var(--ref-palette-primary99)',
    100: 'var(--ref-palette-primary100)',
  },

  refSecondary: {
    0: 'var(--ref-palette-secondary0)',
    10: 'var(--ref-palette-secondary10)',
    20: 'var(--ref-palette-secondary20)',
    25: 'var(--ref-palette-secondary25)',
    30: 'var(--ref-palette-secondary30)',
    35: 'var(--ref-palette-secondary35)',
    40: 'var(--ref-palette-secondary40)',
    50: 'var(--ref-palette-secondary50)',
    60: 'var(--ref-palette-secondary60)',
    70: 'var(--ref-palette-secondary70)',
    80: 'var(--ref-palette-secondary80)',
    90: 'var(--ref-palette-secondary90)',
    95: 'var(--ref-palette-secondary95)',
    98: 'var(--ref-palette-secondary98)',
    99: 'var(--ref-palette-secondary99)',
    100: 'var(--ref-palette-secondary100)',
  },

  refTertiary: {
    0: 'var(--ref-palette-tertiary0)',
    10: 'var(--ref-palette-tertiary10)',
    20: 'var(--ref-palette-tertiary20)',
    25: 'var(--ref-palette-tertiary25)',
    30: 'var(--ref-palette-tertiary30)',
    35: 'var(--ref-palette-tertiary35)',
    40: 'var(--ref-palette-tertiary40)',
    50: 'var(--ref-palette-tertiary50)',
    60: 'var(--ref-palette-tertiary60)',
    70: 'var(--ref-palette-tertiary70)',
    80: 'var(--ref-palette-tertiary80)',
    90: 'var(--ref-palette-tertiary90)',
    95: 'var(--ref-palette-tertiary95)',
    98: 'var(--ref-palette-tertiary98)',
    99: 'var(--ref-palette-tertiary99)',
    100: 'var(--ref-palette-tertiary100)',
  },

  refNeutral: {
    0: 'var(--ref-palette-neutral0)',
    10: 'var(--ref-palette-neutral10)',
    20: 'var(--ref-palette-neutral20)',
    25: 'var(--ref-palette-neutral25)',
    30: 'var(--ref-palette-neutral30)',
    35: 'var(--ref-palette-neutral35)',
    40: 'var(--ref-palette-neutral40)',
    50: 'var(--ref-palette-neutral50)',
    60: 'var(--ref-palette-neutral60)',
    70: 'var(--ref-palette-neutral70)',
    80: 'var(--ref-palette-neutral80)',
    90: 'var(--ref-palette-neutral90)',
    95: 'var(--ref-palette-neutral95)',
    98: 'var(--ref-palette-neutral98)',
    99: 'var(--ref-palette-neutral99)',
    100: 'var(--ref-palette-neutral100)',
  },

  refNeutralVariant: {
    0: 'var(--ref-palette-neutral-variant0)',
    10: 'var(--ref-palette-neutral-variant10)',
    20: 'var(--ref-palette-neutral-variant20)',
    25: 'var(--ref-palette-neutral-variant25)',
    30: 'var(--ref-palette-neutral-variant30)',
    35: 'var(--ref-palette-neutral-variant35)',
    40: 'var(--ref-palette-neutral-variant40)',
    50: 'var(--ref-palette-neutral-variant50)',
    60: 'var(--ref-palette-neutral-variant60)',
    70: 'var(--ref-palette-neutral-variant70)',
    80: 'var(--ref-palette-neutral-variant80)',
    90: 'var(--ref-palette-neutral-variant90)',
    95: 'var(--ref-palette-neutral-variant95)',
    98: 'var(--ref-palette-neutral-variant98)',
    99: 'var(--ref-palette-neutral-variant99)',
    100: 'var(--ref-palette-neutral-variant100)',
  },

  refError: {
    0: 'var(--ref-palette-error0)',
    10: 'var(--ref-palette-error10)',
    20: 'var(--ref-palette-error20)',
    25: 'var(--ref-palette-error25)',
    30: 'var(--ref-palette-error30)',
    35: 'var(--ref-palette-error35)',
    40: 'var(--ref-palette-error40)',
    50: 'var(--ref-palette-error50)',
    60: 'var(--ref-palette-error60)',
    70: 'var(--ref-palette-error70)',
    80: 'var(--ref-palette-error80)',
    90: 'var(--ref-palette-error90)',
    95: 'var(--ref-palette-error95)',
    98: 'var(--ref-palette-error98)',
    99: 'var(--ref-palette-error99)',
    100: 'var(--ref-palette-error100)',
  },
} as const;

export const generateColors = (palette: typeof palettes.h300) => ({
  primaryLight: palette.refPrimary[40],
  primaryDark: palette.refPrimary[80],
  primaryAuto: 'rgba(var(--sys-color-primary) , <alpha-value>)',
  onPrimaryLight: palette.refPrimary[100],
  onPrimaryDark: palette.refPrimary[20],
  onPrimaryAuto: 'rgba(var(--sys-color-on-primary) , <alpha-value>)',
  primaryContainerLight: palette.refPrimary[90],
  primaryContainerDark: palette.refPrimary[30],
  primaryContainerAuto: 'rgba(var(--sys-color-primary-container) , <alpha-value>)',
  onPrimaryContainerLight: palette.refPrimary[10],
  onPrimaryContainerDark: palette.refPrimary[90],
  onPrimaryContainerAuto: 'rgba(var(--sys-color-on-primary-container) , <alpha-value>)',

  secondaryLight: palette.refSecondary[40],
  secondaryDark: palette.refSecondary[80],
  secondaryAuto: 'rgba(var(--sys-color-secondary) , <alpha-value>)',
  onSecondaryLight: palette.refSecondary[100],
  onSecondaryDark: palette.refSecondary[20],
  onSecondaryAuto: 'rgba(var(--sys-color-on-secondary) , <alpha-value>)',
  secondaryContainerLight: palette.refSecondary[90],
  secondaryContainerDark: palette.refSecondary[30],
  secondaryContainerAuto: 'rgba(var(--sys-color-secondary-container) , <alpha-value>)',
  onSecondaryContainerLight: palette.refSecondary[10],
  onSecondaryContainerDark: palette.refSecondary[90],
  onSecondaryContainerAuto: 'rgba(var(--sys-color-on-secondary-container) , <alpha-value>)',

  tertiaryLight: palette.refTertiary[40],
  tertiaryDark: palette.refTertiary[80],
  tertiaryAuto: 'rgba(var(--sys-color-tertiary) , <alpha-value>)',
  onTertiaryLight: palette.refTertiary[100],
  onTertiaryDark: palette.refTertiary[20],
  onTertiaryAuto: 'rgba(var(--sys-color-on-tertiary) , <alpha-value>)',
  tertiaryContainerLight: palette.refTertiary[90],
  tertiaryContainerDark: palette.refTertiary[30],
  tertiaryContainerAuto: 'rgba(var(--sys-color-tertiary-container) , <alpha-value>)',
  onTertiaryContainerLight: palette.refTertiary[10],
  onTertiaryContainerDark: palette.refTertiary[90],
  onTertiaryContainerAuto: 'rgba(var(--sys-color-on-tertiary-container) , <alpha-value>)',

  backgroundLight: palette.refNeutral[99],
  backgroundDark: palette.refNeutral[10],
  backgroundAuto: 'rgba(var(--sys-color-background) , <alpha-value>)',
  onBackgroundLight: palette.refNeutral[10],
  onBackgroundDark: palette.refNeutral[90],
  onBackgroundAuto: 'rgba(var(--sys-color-on-background) , <alpha-value>)',

  surfaceLight: palette.refNeutral[99],
  surfaceDark: palette.refNeutral[10],
  surfaceAuto: 'rgba(var(--sys-color-surface) , <alpha-value>)',
  onSurfaceLight: palette.refNeutral[10],
  onSurfaceDark: palette.refNeutral[90],
  onSurfaceAuto: 'rgba(var(--sys-color-on-surface) , <alpha-value>)',

  surfaceVariantLight: palette.refNeutral[90],
  surfaceVariantDark: palette.refNeutral[30],
  surfaceVariantAuto: 'rgba(var(--sys-color-surface-variant) , <alpha-value>)',
  onSurfaceVariantLight: palette.refNeutral[30],
  onSurfaceVariantDark: palette.refNeutral[80],
  onSurfaceVariantAuto: 'rgba(var(--sys-color-on-surface-variant) , <alpha-value>)',

  outlineLight: palette.refNeutral[50],
  outlineDark: palette.refNeutral[60],
  outlineVariantAuto: 'rgba(var(--sys-color-outline-variant) , <alpha-value>)',
  outlineVariantLight: palette.refNeutral[80],
  outlineVariantDark: palette.refNeutral[30],
  onOutlineVariantAuto: 'rgba(var(--sys-color-on-outline-variant) , <alpha-value>)',

  errorLight: palette.refError[40],
  errorDark: palette.refError[80],
  errorAuto: 'rgba(var(--sys-color-error) , <alpha-value>)',
  onErrorLight: palette.refError[100],
  onErrorDark: palette.refError[20],
  onErrorAuto: 'rgba(var(--sys-color-on-error) , <alpha-value>)',
  errorContainerLight: palette.refError[90],
  errorContainerDark: palette.refError[30],
  errorContainerAuto: 'rgba(var(--sys-color-error-container) , <alpha-value>)',
  onErrorContainerLight: palette.refError[10],
  onErrorContainerDark: palette.refError[90],
  onErrorContainerAuto: 'rgba(var(--sys-color-on-error-container) , <alpha-value>)',

  inversePrimaryLight: palette.refPrimary[80],
  inversePrimaryDark: palette.refPrimary[40],
  inversePrimaryAuto: 'rgba(var(--sys-color-inverse-primary) , <alpha-value>)',
  inverseSurfaceLight: palette.refNeutral[20],
  inverseSurfaceDark: palette.refNeutral[90],
  inverseSurfaceAuto: 'rgba(var(--sys-color-inverse-surface) , <alpha-value>)',
  inverseOnSurfaceLight: palette.refNeutral[95],
  inverseOnSurfaceDark: palette.refNeutral[25],
  inverseOnSurfaceAuto: 'rgba(var(--sys-color-inverse-on-surface) , <alpha-value>)',

  surfaceTint: palette.refPrimary[40],
  shadow: palette.refNeutral[0],
  scrim: palette.refNeutral[0],
} as const);
